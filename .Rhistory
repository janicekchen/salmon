names(export_sum)[6:7] <- c("dest_lon", "dest_lat")]
names(export_sum)[6:7] <- c("dest_lon", "dest_lat")
length(unique(import_sum$clearance_port))
length(unique(export_sum$clearance_port))
unique(c(import_sum$clearance_port, export_sum$clearance_port))
length(unique(c(import_sum$clearance_port, export_sum$clearance_port)))
# creating list of unique ports
unique_ports <- unique(c(import_sum$clearance_port, export_sum$clearance_port)
View(ports)
View(ports)
# filtering Canadian ports to this list
ports %<>% filter(port_code %in% unique_ports)
# MATCHING PORT COORDINATES
# creating list of unique ports
unique_ports <- unique(c(import_sum$clearance_port, export_sum$clearance_port)
# filtering Canadian ports to this list
ports %<>% filter(port_code %in% unique_ports)
# MATCHING PORT COORDINATES
# creating list of unique ports
unique_ports <- unique(c(import_sum$clearance_port, export_sum$clearance_port))
# filtering Canadian ports to this list
ports %<>% filter(port_code %in% unique_ports)
View(ports)
write.csv(ports, "ports_filtered.csv")
write.csv(ports, "data/processed/ports_filtered.csv")
ports_filt <- read.csv("data/processed/ports_filtered.csv")
View(ports_filt)
import_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
View(import_sum)
names(import_sum)[13:14] <- c("dest_lat", "dest_lon")
names(import_sum)[13:14] <- c("dest_lat", "dest_lon")
names(import_sum)
names(import_sum)[8:9] <- c("dest_lat", "dest_lon")
export_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
names(export_sum)[8:9] <- c("or_lat", "or_lon")
View(export_sum)
library(geosphere)
# mapping
flow <- function(x) {
gcIntermediate(as.data.frame(x)[, 7:8], as.data.frame(x)[, 5:6],
sp = TRUE, addStartEnd = TRUE)}
unique(import_sum$year)
unique(export_sum$year)
df_list <- list(import_sum, export_sum)
?gcIntermediate
# mapping
flow <- function(x) {
gcIntermediate(as.data.frame(x)[, 6:7], as.data.frame(x)[, c(9, 8)],
sp = TRUE, addStartEnd = TRUE)}
lapply(df_list, function(x) {
for(i in 1999:2020) {
t <- x %>%
filter(year == i)
flows <- flow(t)
assign(paste0(x, i), flows)
}
})
warnings()
test <- gcIntermediate(export_sum[, 6:7], export_sum[, c(9, 8)],
sp = TRUE, addStartEnd = TRUE)
test <- export_sum[!is.na(export_sum)]
test <- export_sum[!is.na(export_sum), ]
test <- export_sum[complete.cases(export_sum)]
test <- gcIntermediate(import_sum[, 6:7], import_sum[, c(9, 8)],
sp = TRUE, addStartEnd = TRUE)
test <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
View(ports_filt)
ports_filt <- ports_filt[, c(1:4, 6, 5)]
View(ports_filt)
import_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
names(export_sum)[8:9] <- c("or_lon", "or_lat")
# mapping
flow <- function(x) {
gcIntermediate(as.data.frame(x)[, 6:7], as.data.frame(x)[, 8:9],
sp = TRUE, addStartEnd = TRUE)}
test <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
import_sum <- import_us %>%
group_by(year, us_stateorigin, clearance_port) %>%
summarize(quant = sum(quant), value = sum(value))
import_sum$us_stateorigin <- gsub(", State", "", import_sum$us_stateorigin)
# joining centroid data frame to export/import data frame
import_sum %<>% left_join(us_states, by = c("us_stateorigin" = "NAME"))
names(import_sum)[6:7] <- c("or_lon", "or_lat")
import_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
# summarize by year, departure and arrival
export_sum <- export_us %>%
group_by(year, us_statedest, clearance_port) %>%
summarize(quant = sum(quant), value = sum(value))
export_sum$us_statedest <- gsub(", State", "", export_sum$us_statedest) # converting "Washington, State" to "Washington to match centroid data frame)
export_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
names(export_sum)[8:9] <- c("or_lon", "or_lat")
export_sum %<>% left_join(us_states, by = c("us_statedest" = "NAME"))
export_sum %<>% left_join(ports_filt[c(1, 5:6)], by = c("clearance_port" = "port_code"))
names(export_sum)[8:9] <- c("or_lon", "or_lat")
test <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
test <- export_sum[complete.cases(export_sum), ]
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sp = FALSE, addStartEnd = TRUE)
View(test2)
st_as_sf(test2)
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sepNA = TRUE, addStartEnd = TRUE)
View(test2)
test3 <- as.data.frame(test2)
View(test3)
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
is.na(test3)
test3[is.na(test3)]
test3[is.na(test3), ]
?st_multilinestring
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
test2 <- gcIntermediate(test[, 6:7], test[, c(8:9)],
sp = FALSE, addStartEnd = TRUE)
test4 <- st_multilinestring(test2)
View(test4)
View(test4)
test4 <- st_as_sf(st_multilinestring(test2))
test4 <- st_sf(st_multilinestring(test2))
test4 <- st_sf(st_multilinestring(test2))
test4 <- as.data.frame(st_multilinestring(test2))
View(test2)
test4 <- lapply(test2, function(x) {
st_linestring(x)
})
View(test4)
test5 <- st_cast(test4)
class(test4[[1]]
class(test4[[1]])
class(test)
View(test)
View(import_sum)
test2 <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
?gcIntermediate
test2 <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = FALSE, addStartEnd = TRUE)
import_sum[, c(8:9)]
View(test)
test2 <- gcIntermediate(import_sum[, 8:9], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
View(test2)
blep <- gcIntermediate(import_sum[, 6:7], import_sum[, c(8:9)],
sp = TRUE, addStartEnd = TRUE)
blep <- gcIntermediate(import_sum[, 8:9], import_sum[, c(6:7)],
sp = TRUE, addStartEnd = TRUE)
blep <- gcIntermediate(import_sum[, 8:9], import_sum[, c(6:7)],
sp = TRUE, addStartEnd = TRUE)
blep <- gcIntermediate(import_sum[, 8:9], import_sum[, 6:7],
sp = TRUE, addStartEnd = TRUE)
blep <- gcIntermediate(import_sum[, 6:7], import_sum[, 8:9],
sp = TRUE, addStartEnd = TRUE)
import_sum[, 8:9]
View(import_sum)
blep <- gcIntermediate(import_sum[complete.cases(import_sum), 6:7], import_sum[complete.cases(import_sum), 8:9],
sp = TRUE, addStartEnd = TRUE)
View(blep)
# mapping
flow <- function(x) {
gcIntermediate(as.data.frame(x)[complete.cases(x), 6:7], as.data.frame(x)[complete.cases(x), 8:9],
sp = TRUE, addStartEnd = TRUE)}
df_list <- list(import_sum, export_sum)
lapply(df_list, function(x) {
for(i in 1999:2020) {
t <- x %>%
filter(year == i)
flows <- flow(t)
assign(paste0(x, i), flows)
}
})
warnings()
lapply(df_list, function(x) {
for(i in 1999:2020) {
t <- x %>%
filter(year == i)
flows <- flow(t)
assign(paste0(x, i), flows, envir = .GlobalEnv)
}
})
source('~/Documents/salmon/Untitled.R')
flow_list <- lapply(df_list, function(x) {
flow(x)
# for(i in 1999:2020) {
#   t <- x %>%
#     filter(year == i)
#   flows <- flow(t)
#   assign(paste0(x, i), flows, envir = .GlobalEnv)
# }
})
View(flow_list)
View(flow_list)
for (i in df_list) {
for(j in 1999:2020) {
t <- i %>%
filter(year == j)
flows <- flow(t)
assign(paste0(i, j), flows, envir = .GlobalEnv)
}
}
source('~/Documents/salmon/Untitled.R')
for (i in df_list) {
for(j in 2018:2020) {
t <- i %>%
filter(year == j)
flows <- flow(t)
print(paste0(i, j))
}
}
for (i in df_list) {
for(j in 2018:2020) {
t <- i %>%
filter(year == j)
flows <- flow(t)
print(i)
}
}
deparse(import_sum)
deparse(match.call()$import_sum)
get(import_sum)
?get
deparse(substitue(import_sum))
deparse(substitute(import_sum))
for (i in df_list) {
for(j in 2018:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(import_sum))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
View(import_sum2018)
View(import_sum2019)
View(import_sum2020)
for (i in df_list) {
for(j in 1990:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(import_sum))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
for (i in df_list) {
for(j in 2000:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(import_sum))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
for (i in df_list) {
for(j in 1990:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(i))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
for (i in df_list) {
for(j in 2000:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(i))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
View(i)
rm(i)
for (i in df_list) {
for(j in 2000:2020) {
t <- i %>%
filter(year == j)
name <- deparse(substitute(i))
flows <- flow(t)
assign(paste0(name, j), flows, envir = .GlobalEnv)
}
}
for(j in 2000:2020) {
t <- export_sum %>%
filter(year == j)
flows <- flow(t)
assign(paste0("export", j), flows, envir = .GlobalEnv)
}
for(j in 2000:2020) {
t <- import_sum %>%
filter(year == j)
flows <- flow(t)
assign(paste0("import", j), flows, envir = .GlobalEnv)
}
source('~/Documents/salmon/Untitled.R')
library(leaflet)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(export2020)
source('~/Documents/MILK/geog54_final_clean.R')
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020)
View(export_sum)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black") %>%
addPolylines(data = export2000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", size = 0.5) %>%
addPolylines(data = export2000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", width = 0.5) %>%
addPolylines(data = export2000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", weight = 1) %>%
addPolylines(data = export2000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", weight = ~value) %>%
addPolylines(data = export2000)
export2020_sf <- st_as_sf(export2020)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", weight = ~value)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", weight = export2020$value)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020, color = "black", weight = export2020$value)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020_sf, color = "black", weight = export2020_sf$value)
st_crs(export2020_sf)
st_crs(export2020_sf) <- 4326
export2020_sf <- st_transform(export2020_sf, 4326)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020_sf, color = "black", weight = export2020_sf$value)
View(export_sum)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020_sf, color = "black", weight = ~value)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = export2020_sf, color = "black", weight = ~value)
install.packages("leaflet.minicharts")
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addFlows(export2020_sf)
?addFLows
?addFlows
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
leaflet.minicharts::addFlows(export2020_sf)
?leaflet.minicharts::addFlows
View(export2020_sf)
st_coordinates(export2020_sf)[, 1]
x <- st_coordinates(export2020_sf)[, 1]
y <- st_coordinates(export2020_sf)[, 1]
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
leaflet.minicharts::addFlows(x, y)
temp <- export_sum %>%
filter(year == 2020) %>%
cbind(export2020_sf)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = ~value)
temp <- export_sum %>%
filter(year == 2020) %>%
cbind(export2020_sf) %>%
st_as_sf()
View(temp)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = ~value)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = ~value / 100)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = ~value / 1000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 1000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = sqrt(temp$value) )
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 100000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 1000000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 10000000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 5000000)
temp2 <- export_sum %>%
filter(year == 2000) %>%
cbind(st_as_sf(export2000)) %>%
st_as_sf()
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "black", weight = temp2$value / 5000000)
temp2 <- export_sum %>%
filter(year == 2000) %>%
cbind(st_as_sf(export2000)) %>%
st_as_sf() %>%
st_transform(4326)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "black", weight = temp2$value / 5000000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 5000000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 5000000)
View(temp2)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 5000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 50000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 500000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = temp2, color = "blue", weight = temp2$value / 100000)
for(j in 2000:2020) {
t <- export_sum %>%
filter(year == j)
flows <- flow(t) %>%
st_as_sf() %>%
cbind(t) %>%
st_as_sf() %>%
st_transform(4326)
assign(paste0("export", j), flows, envir = .GlobalEnv)
}
for(j in 2000:2020) {
t <- export_sum[complete.cases(export_sum), ] %>%
filter(year == j)
flows <- flow(t) %>%
st_as_sf() %>%
cbind(t) %>%
st_as_sf() %>%
st_transform(4326)
assign(paste0("export", j), flows, envir = .GlobalEnv)
}
for(j in 2000:2020) {
t <- import_sum[complete.cases(import_sum), ] %>%
filter(year == j)
flows <- flow(t) %>%
st_as_sf() %>%
cbind(t) %>%
st_as_sf() %>%
st_transform(4326)
assign(paste0("import", j), flows, envir = .GlobalEnv)
}
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 5000000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 5000000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 500000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 500000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 50000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 50000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 100000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 100000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 500000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 500000)
leaflet() %>%
addProviderTiles('CartoDB.Positron') %>%
# addPolylines(data = temp, color = "black", weight = temp$value / 5000000) %>%
addPolylines(data = export2020, color = "blue", weight = temp2$value / 500000) %>%
addPolylines(data = import2020, color = "black", weight = temp2$value / 500000)
